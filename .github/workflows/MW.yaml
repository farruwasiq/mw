ame: Manual Start/End Workflow

on:
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Choose action: start or end'
        required: true
        type: choice
        options:
          - start
          - end
      # Removed run_id_to_download input as it will be found automatically for 'end' action

jobs:
  start-workflow:
    # This job runs only if the 'action_type' input is 'start'
    if: github.event.inputs.action_type == 'start'
    runs-on: ubuntu-latest

    permissions:
      contents: write # Needed for actions/upload-artifact to write to the repository's artifact storage

    steps:
      - name: Generate and Save Run Details
        id: generate_details # Assign an ID to this step to reference its outputs
        run: |
          # Get the current workflow run ID
          RUN_ID="${{ github.run_id }}"
          # Create a simple description for the run
          RUN_DESCRIPTION="Workflow started at $(date)"

          # Output these values so they can be used by subsequent steps or for artifact naming
          echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "run_description=${RUN_DESCRIPTION}" >> "$GITHUB_OUTPUT"

          # Create a file with the run details
          echo "Run ID: ${RUN_ID}" > run_details.txt
          echo "Description: ${RUN_DESCRIPTION}" >> run_details.txt
          echo "Artifact created for run ID: ${RUN_ID}"

      - name: Upload Run Details Artifact
        uses: actions/upload-artifact@v4 # Use the official GitHub action to upload artifacts
        with:
          # Name the artifact uniquely using the run ID from the previous step's output
          name: run-details-${{ steps.generate_details.outputs.run_id }}
          # Specify the path to the file(s) to upload
          path: run_details.txt
          # Set a retention period for the artifact (e.g., 1 day for this example)
          retention-days: 1

  end-workflow:
    # This job runs only if the 'action_type' input is 'end'
    if: github.event.inputs.action_type == 'end'
    runs-on: ubuntu-latest

    permissions:
      actions: read # Needed for gh CLI to list workflow runs and for actions/download-artifact
      contents: read # Needed for actions/download-artifact to read artifacts

    steps:
      - name: Checkout repository # <<< ADDED THIS STEP
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI..."
          gh --version

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the built-in GITHUB_TOKEN for authentication
        run: |
          echo "Authenticating GitHub CLI..."
          gh auth setup-git # Configures Git to use gh for credential management

      - name: Find Latest Successful Workflow Run ID
        id: find_run_id # Assign an ID to this step to store its output
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure GH_TOKEN is available for gh commands
        run: |
          echo "Searching for the latest successful run of this workflow..."
          # Use gh run list to find the latest successful run of the current workflow.
          # --workflow "${{ github.workflow }}" ensures we only look at runs of this specific workflow file.
          # --status success filters for runs that completed successfully.
          # --limit 1 gets only the most recent one.
          # --json databaseId extracts the internal ID of the run.
          # jq -r '.[0].databaseId' parses the JSON output to get the raw ID.
          LATEST_RUN_ID=$(gh run list --workflow "${{ github.workflow }}" --status success --limit 1 --json databaseId | jq -r '.[0].databaseId')

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "::error::No successful previous runs found for this workflow to download artifacts from."
            exit 1 # Exit with an error if no run ID is found
          fi

          echo "Found latest successful run ID: $LATEST_RUN_ID"
          # Set the found run ID as an output of this step, so subsequent steps can use it.
          echo "run_id_to_download=$LATEST_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Download Previous Run Details Artifact
        uses: actions/download-artifact@v4 # Use the official GitHub action to download artifacts
        with:
          # Use the run ID found in the previous step to download the correct artifact.
          run-id: ${{ steps.find_run_id.outputs.run_id_to_download }}
          # Construct the artifact name dynamically using the found run ID.
          name: run-details-${{ steps.find_run_id.outputs.run_id_to_download }}
          # Specify the path where the artifact should be downloaded
          path: downloaded_artifacts

      - name: Display Previous Run Details
        run: |
          echo "--- Details of Previous Run (ID: ${{ steps.find_run_id.outputs.run_id_to_download }}) ---"
          # Display the content of the downloaded file
          cat downloaded_artifacts/run_details.txt
          echo "----------------------------------------------------"