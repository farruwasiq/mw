name: JSM MW # This is your static workflow's display name

run-name: ${{ github.workflow }} - ${{ github.event.inputs.action_type }} # <-- CORRECT PLACEMENT

on:
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Choose action: start or end'
        required: true
        type: choice
        options:
          - start
          - end
      # Removed run_id_to_download input as it will be found automatically for 'end' action

jobs:
  start-workflow:
    # This job runs only if the 'action_type' input is 'start'
    if: github.event.inputs.action_type == 'start'
    runs-on: ubuntu-latest

    permissions:
      contents: write # Needed for actions/upload-artifact to write to the repository's artifact storage

    steps:
      - name: Generate and Save Run Details
        id: generate_details # Assign an ID to this step to reference its outputs
        run: |
          # Get the current workflow run ID
          RUN_ID="${{ github.run_id }}"
          # Create a simple description for the run
          RUN_DESCRIPTION="Workflow started at $(date)"

          # Output these values so they can be used by subsequent steps or for artifact naming
          echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "run_description=${RUN_DESCRIPTION}" >> "$GITHUB_OUTPUT"

          # Create a file with the run details
          echo "Run ID: ${RUN_ID}" > run_details.txt
          echo "Description: ${RUN_DESCRIPTION}" >> run_details.txt
          echo "Artifact created for run ID: ${RUN_ID}"

      - name: Upload Run Details Artifact
        uses: actions/upload-artifact@v4 # Use the official GitHub action to upload artifacts
        with:
          # IMPORTANT CHANGE: Name the artifact to explicitly include "start"
          # This is crucial for the 'end' workflow to identify it reliably.
          name: run-details-start-${{ steps.generate_details.outputs.run_id }}
          # Specify the path to the file(s) to upload
          path: run_details.txt
          # Set a retention period for the artifact (e.g., 1 day for this example)
          retention-days: 1

  end-workflow:
    # This job runs only if the 'action_type' input is 'end'
    if: github.event.inputs.action_type == 'end'
    runs-on: ubuntu-latest

    permissions:
      actions: read # Needed for gh CLI to list workflow runs and for actions/download-artifact
      contents: read # Needed for actions/download-artifact to read artifacts

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        # MANUAL INSTALLATION OF GITHUB CLI
        run: |
          echo "Manually installing GitHub CLI..."
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          gh --version

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the built-in GITHUB_TOKEN for authentication
        run: |
          echo "Authenticating GitHub CLI..."
          gh auth setup-git # Configures Git to use gh for credential management

      - name: Find Latest Successful 'start' Run (by `gh run list` filter)
        id: find_run # Assign an ID to this step to store its output
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure GH_TOKEN is available for gh commands
        run: |
          echo "Searching for the latest successful 'start' run using gh run list filters..."

          # DIRECTLY PIPE gh output to jq. This avoids shell variable size limits.
          LATEST_START_RUN_ID=$(gh run list \
            --workflow "JSM MW" \
            --json databaseId,displayTitle,event,status,conclusion \
            --limit 100 | \
            jq -r '.[] | select(.displayTitle | contains("JSM MW - start") and .event == "workflow_dispatch" and .status == "completed" and .conclusion == "success") | .databaseId | tostring' | head -n 1)

          if [ -z "$LATEST_START_RUN_ID" ]; then
            echo "::error::No successful 'start' runs found with the expected criteria (displayTitle: 'JSM MW - start', event: 'workflow_dispatch', status: 'completed', conclusion: 'success')."
            echo "Please ensure a 'start' workflow has run successfully with these characteristics."
            exit 1 # Exit with an error if no suitable run is found
          fi

          echo "Found latest successful 'start' run ID: $LATEST_START_RUN_ID"
          # Set the found run ID as an output of this step.
          echo "run_id_to_download=$LATEST_START_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Wait for Artifact Availability (Optional)
        run: |
          echo "Waiting for 5 seconds to ensure artifact availability..."
          sleep 5 # Add a small delay

      - name: Download Previous Run Details Artifact
        uses: actions/download-artifact@v4 # Use the official GitHub action to download artifacts
        with:
          # Use the run ID found in the previous step.
          run-id: ${{ steps.find_run.outputs.run_id_to_download }}
          # The artifact name is expected to be 'run-details-start-<run_id>' as set by the 'start-workflow'.
          name: run-details-start-${{ steps.find_run.outputs.run_id_to_download }}
          # Specify the path where the artifact should be downloaded
          path: downloaded_artifacts

      - name: Display Previous Run Details
        run: |
          echo "--- Details of Previous Run (ID: ${{ steps.find_run.outputs.run_id_to_download }}) ---"
          # Display the content of the downloaded file
          cat downloaded_artifacts/run_details.txt
          echo "----------------------------------------------------"