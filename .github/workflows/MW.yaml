name: Manual Start/End Workflow

on:
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Choose action: start or end'
        required: true
        type: choice
        options:
          - start
          - end
      # Removed run_id_to_download input as it will be found automatically for 'end' action

jobs:
  start-workflow:
    # This job runs only if the 'action_type' input is 'start'
    if: github.event.inputs.action_type == 'start'
    runs-on: ubuntu-latest

    permissions:
      contents: write # Needed for actions/upload-artifact to write to the repository's artifact storage

    steps:
      - name: Generate and Save Run Details
        id: generate_details # Assign an ID to this step to reference its outputs
        run: |
          # Get the current workflow run ID
          RUN_ID="${{ github.run_id }}"
          # Create a simple description for the run
          RUN_DESCRIPTION="Workflow started at $(date)"

          # Output these values so they can be used by subsequent steps or for artifact naming
          echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "run_description=${RUN_DESCRIPTION}" >> "$GITHUB_OUTPUT"

          # Create a file with the run details
          echo "Run ID: ${RUN_ID}" > run_details.txt
          echo "Description: ${RUN_DESCRIPTION}" >> run_details.txt
          echo "Artifact created for run ID: ${RUN_ID}"

      - name: Upload Run Details Artifact
        uses: actions/upload-artifact@v4 # Use the official GitHub action to upload artifacts
        with:
          # Name the artifact uniquely using the run ID from the previous step's output
          name: run-details-${{ steps.generate_details.outputs.run_id }}
          # Specify the path to the file(s) to upload
          path: run_details.txt
          # Set a retention period for the artifact (e.g., 1 day for this example)
          retention-days: 1

  end-workflow:
    # This job runs only if the 'action_type' input is 'end'
    if: github.event.inputs.action_type == 'end'
    runs-on: ubuntu-latest

    permissions:
      actions: read # Needed for gh CLI to list workflow runs and for actions/download-artifact
      contents: read # Needed for actions/download-artifact to read artifacts

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          echo "Setting up GitHub CLI..."
          gh --version

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the built-in GITHUB_TOKEN for authentication
        run: |
          echo "Authenticating GitHub CLI..."
          gh auth setup-git # Configures Git to use gh for credential management

      - name: Find Latest Successful 'start' Run's Artifact
        id: find_artifact # Assign an ID to this step to store its output
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure GH_TOKEN is available for gh commands
        run: |
          echo "Searching for the latest successful 'start' run's artifact..."

          # Use gh run list to find the latest successful workflow_dispatch run
          # that has 'start' in its display title.
          # The displayTitle often includes the workflow_dispatch inputs.
          # This avoids complex parsing of the 'event' field.
          LATEST_START_RUN_INFO=$(gh run list \
            --workflow "${{ github.workflow }}" \
            --event workflow_dispatch \
            --status success \
            --json databaseId,displayTitle \
            --limit 100 | \
            jq -r '.[] | select(.displayTitle | contains("start")) | .databaseId | tostring' | head -n 1)

          LATEST_START_RUN_ID="$LATEST_START_RUN_INFO"
          ARTIFACT_NAME_FOUND=""

          if [ -z "$LATEST_START_RUN_ID" ]; then
            echo "::error::No successful 'start' runs (with 'start' in display title) found for this workflow."
            exit 1 # Exit with an error if no suitable run is found
          fi

          echo "Found latest 'start' run ID: $LATEST_START_RUN_ID"

          # Now, list artifacts specifically for this 'start' run
          # Filter for artifacts whose name starts with 'run-details-'
          ARTIFACT_INFO_FOR_RUN=$(gh artifact list --run-id "$LATEST_START_RUN_ID" --json name | jq -r '.[] | select(.name | startswith("run-details-")) | .name')

          if [ -n "$ARTIFACT_INFO_FOR_RUN" ]; then
            ARTIFACT_NAME_FOUND="$ARTIFACT_INFO_FOR_RUN"
          else
            echo "::error::No 'run-details' artifact found for run ID: $LATEST_START_RUN_ID"
            exit 1 # Exit with an error if no artifact is found for the identified run
          fi

          echo "Found latest successful 'start' artifact: $ARTIFACT_NAME_FOUND from run ID: $LATEST_START_RUN_ID"
          # Set the found artifact name and run ID as outputs of this step,
          # so subsequent steps can use them.
          echo "artifact_name_to_download=$ARTIFACT_NAME_FOUND" >> "$GITHUB_OUTPUT"
          echo "run_id_to_download=$LATEST_START_RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Download Previous Run Details Artifact
        uses: actions/download-artifact@v4 # Use the official GitHub action to download artifacts
        with:
          # Use the artifact name and run ID found in the previous step to download the correct artifact.
          name: ${{ steps.find_artifact.outputs.artifact_name_to_download }}
          run-id: ${{ steps.find_artifact.outputs.run_id_to_download }}
          # Specify the path where the artifact should be downloaded
          path: downloaded_artifacts

      - name: Display Previous Run Details
        run: |
          echo "--- Details of Previous Run (ID: ${{ steps.find_artifact.outputs.run_id_to_download }}) ---"
          # Display the content of the downloaded file
          cat downloaded_artifacts/run_details.txt
          echo "----------------------------------------------------"
